datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Existing Auth Models
model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Authenticator Authenticator[]

    // Custom fields for our application
    dietaryPreferences DietaryPreference[]
    allergies          Allergy[]
    hostedEvents       Event[]             @relation("EventHost")
    attendances        EventAttendee[]
    comments           Comment[]
    suggestions        Suggestion[]
    subscription       Subscription?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

// New Models for the Application
model Event {
    id          String   @id @default(cuid())
    title       String
    description String?
    location    String
    dateTime    DateTime
    maxGuests   Int
    isPrivate   Boolean  @default(true)

    hostId      String
    host        User            @relation("EventHost", fields: [hostId], references: [id])
    attendees   EventAttendee[]
    comments    Comment[]
    suggestions Suggestion[]

    invitationLink String  @unique
    isPremium      Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([hostId])
}

model EventAttendee {
    id      String         @id @default(cuid())
    eventId String
    userId  String
    status  AttendeeStatus @default(PENDING)

    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([eventId, userId])
    @@index([userId])
    @@index([eventId])
}

model DietaryPreference {
    id          String  @id @default(cuid())
    userId      String
    name        String
    description String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, name])
    @@index([userId])
}

model Allergy {
    id       String          @id @default(cuid())
    userId   String
    name     String
    severity AllergySeverity

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, name])
    @@index([userId])
}

model Comment {
    id      String @id @default(cuid())
    content String
    eventId String
    userId  String

    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([eventId])
    @@index([userId])
}

model Suggestion {
    id          String @id @default(cuid())
    title       String
    description String
    eventId     String
    userId      String

    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([eventId])
    @@index([userId])
}

model Subscription {
    id                   String             @id @default(cuid())
    userId               String             @unique
    type                 SubscriptionType
    status               SubscriptionStatus
    currentPeriodStart   DateTime
    currentPeriodEnd     DateTime
    stripeCustomerId     String?
    stripeSubscriptionId String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

enum AttendeeStatus {
    PENDING
    CONFIRMED
    DECLINED
    MAYBE
}

enum AllergySeverity {
    MILD
    MODERATE
    SEVERE
    FATAL
}

enum SubscriptionType {
    FREE
    EARLY_BIRD
    PREMIUM
}

enum SubscriptionStatus {
    ACTIVE
    CANCELED
    EXPIRED
    PAST_DUE
}
